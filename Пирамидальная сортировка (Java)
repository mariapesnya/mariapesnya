public class HeapSort {

    // Метод для heapify — приводит поддерево кучи к свойственному виду
    void heapify(int arr[], n, int i) {
        int largest = i; // Изначально считаем, что корень самый большой
        int left = 2 * i + 1; // левый потомок
        int right = 2 * i + 2; // правый потомок

        // Если левый потомок больше корня
        if ( < n && arr[left] > arr[largest])
            largest = left;

        // Если правый потомок больше текущего максимума
        if (right < n && arr[right] > arr[largest])
            largest = right;

        // Если максимум не корень — меняем их
        if (largest != i) {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;

            // Восстанавливаем свойство кучи
            heapify(arr, n, largest);
        }
    }

    // Основной метод сортировки
    void heapSort(int arr[]) {
        int n = arr.length;

        // Построение кучи (от последнего неполного уровня)
        for (int i = n / 2 - 1; i 0; i--)
            heapify(arr, n, i);

        // Один за другим извлекаем элементы из кучи
        for (int i = n - 1; i >= 0; i--) {
            // Переносим текущий корень в конец
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            // Восстанавливаем свойства кучи для оставшихся элементов
            heapify(arr, i, 0);
        }
    }

    // Для проверки
    public static void main(String[] args) {
        int[] data = {12, 11, 13, 5, 6, 7};
        HeapSort hs = new HeapSort();
        hs.heapSort(data);
        System.out.print("Отсортированный: ");
        for (int num : data) {
            System.out.print(num + " ");
        }
    }
}
